
SOTRATMEGA16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080006c  0080006c  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e0  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000680  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031c  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UsartInit>:
    }	
}

void UsartInit() {
	
	UBRRL = UBRRL_VALUE;
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRRH_VALUE;
  96:	10 bc       	out	0x20, r1	; 32
	
	UCSRC = _BV(URSEL) | _BV(UCSZ0) | _BV(UCSZ1);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
	
	UCSRB = _BV(RXEN) | _BV(TXEN);
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <UsartPutChar>:
}

void UsartPutChar(char c) {
	while (!(UCSRA & _BV(UDRE)));
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <UsartPutChar>
	UDR = c;
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <UsartPutString>:
}

void UsartPutString(char* s) {
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
	while (*s)
  b0:	88 81       	ld	r24, Y
  b2:	88 23       	and	r24, r24
  b4:	31 f0       	breq	.+12     	; 0xc2 <UsartPutString+0x18>
  b6:	21 96       	adiw	r28, 0x01	; 1
	UsartPutChar(*s++);
  b8:	0e 94 51 00 	call	0xa2	; 0xa2 <UsartPutChar>
	while (!(UCSRA & _BV(UDRE)));
	UDR = c;
}

void UsartPutString(char* s) {
	while (*s)
  bc:	89 91       	ld	r24, Y+
  be:	81 11       	cpse	r24, r1
  c0:	fb cf       	rjmp	.-10     	; 0xb8 <UsartPutString+0xe>
	UsartPutChar(*s++);
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <ADCInit>:

void ADCInit() {
	
	// Referencia AVCC
	ADMUX = _BV(REFS0);
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	87 b9       	out	0x07, r24	; 7
	// ADC habilitado con preescaler de 128
	// F_ADC = 4000000/128 = 31.25 KHz
	// F_MUESTREO = 62500/13 = 2.4Khz
	// T_MUESTREO = 1/4800 = 416us
	// La conversión tarda 416us.
	ADCSRA = _BV(ADEN) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	08 95       	ret

000000d2 <main>:
int valor=0;//Variable para la lectura del ADC ya multiplicada por la resolucion
char str[16];//Cadena para enviar datos
unsigned int valorAdc;//Lectura del ADC
int main(void)
{
	TCNT0 = 232;//Offset del 
  d2:	88 ee       	ldi	r24, 0xE8	; 232
  d4:	82 bf       	out	0x32, r24	; 50
	TCCR0 = _BV(CS00) | _BV(CS02); // Timer0 modo normal, sin usar el pin OC0, prescaler de 1024
  d6:	85 e0       	ldi	r24, 0x05	; 5
  d8:	83 bf       	out	0x33, r24	; 51
	TIMSK = _BV(TOIE0);// habilta interrupción por desbordamiento de timer0	
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 bf       	out	0x39, r24	; 57
	sei();// habilita interrupciones globales
  de:	78 94       	sei
	UsartInit(); //Configuramoas la comunicacion serial
  e0:	0e 94 49 00 	call	0x92	; 0x92 <UsartInit>
	ADCInit();  //Configuramos el ADC
  e4:	0e 94 64 00 	call	0xc8	; 0xc8 <ADCInit>
	UsartPutString("Hola"); //Enviamos mensaje de prueba
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <UsartPutString>
    DDRC = 255;//Se Define el  puerto D como salida (1 salida, 0 entrada)
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20
	DDRA = 0; //Se define el puerto A como entrada
  f4:	1a ba       	out	0x1a, r1	; 26
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x24>

000000f8 <ADCRead>:

int ADCRead(int canal) {
	
	// seleccionamos el nuevo canal a leer solo modificando solo
	// los bits MUX0 MUX1 y MUX2.
	ADMUX = (ADMUX & 0xF8) | (canal & 0x07);
  f8:	97 b1       	in	r25, 0x07	; 7
  fa:	98 7f       	andi	r25, 0xF8	; 248
  fc:	87 70       	andi	r24, 0x07	; 7
  fe:	89 2b       	or	r24, r25
 100:	87 b9       	out	0x07, r24	; 7
	
	// se inicia la conversión.
	ADCSRA |= _BV(ADSC);
 102:	36 9a       	sbi	0x06, 6	; 6
	
	// espera a que termina la conversión.
	while(ADCSRA & _BV(ADSC));
 104:	36 99       	sbic	0x06, 6	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <ADCRead+0xc>
	
	// regresamos el valor de la conversión.
	return ADC;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
}
 10c:	08 95       	ret

0000010e <__vector_9>:

// función para atender la interrupción
ISR(TIMER0_OVF_vect){
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	PORTC ^= _BV(PC3);// se conmuta el estado del led para inidicar la frecuencia de reloj
 130:	95 b3       	in	r25, 0x15	; 21
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	89 27       	eor	r24, r25
 136:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 232;//Se aplica un offset para que desborde cada 3ms
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	82 bf       	out	0x32, r24	; 50
	valor++;
 13c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 140:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 14a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	switch (valor)
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	91 05       	cpc	r25, r1
 152:	81 f0       	breq	.+32     	; 0x174 <__vector_9+0x66>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	91 05       	cpc	r25, r1
 158:	31 f1       	breq	.+76     	; 0x1a6 <__vector_9+0x98>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	81 f5       	brne	.+96     	; 0x1be <__vector_9+0xb0>
	{
		case 1: ///TAREA 1 LECTURA ANALOGICA
		PORTC|=B_analog;
 15e:	a8 9a       	sbi	0x15, 0	; 21
		valorAdc = ADCRead("0");
 160:	85 e6       	ldi	r24, 0x65	; 101
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADCRead>
 168:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <valorAdc+0x1>
 16c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <valorAdc>
		PORTC&=~B_analog;
 170:	a8 98       	cbi	0x15, 0	; 21
		break;
 172:	25 c0       	rjmp	.+74     	; 0x1be <__vector_9+0xb0>
		case 2: //TAREA 2 ADECUACION DE LA LECTURA PARA ENVIO
		PORTC|=led;
 174:	a9 9a       	sbi	0x15, 1	; 21
		int real=valorAdc*4880;//La lectura en microvolts (sin punto decimal)
		itoa(real, str, 10);
 176:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <valorAdc>
 17a:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <valorAdc+0x1>
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	60 e7       	ldi	r22, 0x70	; 112
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	93 e1       	ldi	r25, 0x13	; 19
 18a:	fc 01       	movw	r30, r24
 18c:	2e 9f       	mul	r18, r30
 18e:	c0 01       	movw	r24, r0
 190:	2f 9f       	mul	r18, r31
 192:	90 0d       	add	r25, r0
 194:	3e 9f       	mul	r19, r30
 196:	90 0d       	add	r25, r0
 198:	11 24       	eor	r1, r1
 19a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <itoa>
		PORTC&=~led;
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	8c 7f       	andi	r24, 0xFC	; 252
 1a2:	85 bb       	out	0x15, r24	; 21
		break;
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <__vector_9+0xb0>
		case 3: //TAREA 3 ENVIO DE LA LECTURA POR PUERTO SERIAL
		PORTC|=B_Serial;
 1a6:	aa 9a       	sbi	0x15, 2	; 21
		UsartPutString("ADC:");
 1a8:	87 e6       	ldi	r24, 0x67	; 103
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 55 00 	call	0xaa	; 0xaa <UsartPutString>
		PORTC&=~B_Serial;
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	88 7f       	andi	r24, 0xF8	; 248
 1b4:	85 bb       	out	0x15, r24	; 21
		valor=0;
 1b6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 1ba:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		break;	
	}
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <itoa>:
 1e0:	45 32       	cpi	r20, 0x25	; 37
 1e2:	51 05       	cpc	r21, r1
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <itoa+0xe>
 1e6:	42 30       	cpi	r20, 0x02	; 2
 1e8:	10 f0       	brcs	.+4      	; 0x1ee <itoa+0xe>
 1ea:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__itoa_ncheck>
 1ee:	fb 01       	movw	r30, r22
 1f0:	10 82       	st	Z, r1
 1f2:	cb 01       	movw	r24, r22
 1f4:	08 95       	ret

000001f6 <__itoa_ncheck>:
 1f6:	bb 27       	eor	r27, r27
 1f8:	4a 30       	cpi	r20, 0x0A	; 10
 1fa:	31 f4       	brne	.+12     	; 0x208 <__itoa_ncheck+0x12>
 1fc:	99 23       	and	r25, r25
 1fe:	22 f4       	brpl	.+8      	; 0x208 <__itoa_ncheck+0x12>
 200:	bd e2       	ldi	r27, 0x2D	; 45
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	0c 94 07 01 	jmp	0x20e	; 0x20e <__utoa_common>

0000020c <__utoa_ncheck>:
 20c:	bb 27       	eor	r27, r27

0000020e <__utoa_common>:
 20e:	fb 01       	movw	r30, r22
 210:	55 27       	eor	r21, r21
 212:	aa 27       	eor	r26, r26
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	aa 1f       	adc	r26, r26
 21a:	a4 17       	cp	r26, r20
 21c:	10 f0       	brcs	.+4      	; 0x222 <__utoa_common+0x14>
 21e:	a4 1b       	sub	r26, r20
 220:	83 95       	inc	r24
 222:	50 51       	subi	r21, 0x10	; 16
 224:	b9 f7       	brne	.-18     	; 0x214 <__utoa_common+0x6>
 226:	a0 5d       	subi	r26, 0xD0	; 208
 228:	aa 33       	cpi	r26, 0x3A	; 58
 22a:	08 f0       	brcs	.+2      	; 0x22e <__utoa_common+0x20>
 22c:	a9 5d       	subi	r26, 0xD9	; 217
 22e:	a1 93       	st	Z+, r26
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	79 f7       	brne	.-34     	; 0x212 <__utoa_common+0x4>
 234:	b1 11       	cpse	r27, r1
 236:	b1 93       	st	Z+, r27
 238:	11 92       	st	Z+, r1
 23a:	cb 01       	movw	r24, r22
 23c:	0c 94 20 01 	jmp	0x240	; 0x240 <strrev>

00000240 <strrev>:
 240:	dc 01       	movw	r26, r24
 242:	fc 01       	movw	r30, r24
 244:	67 2f       	mov	r22, r23
 246:	71 91       	ld	r23, Z+
 248:	77 23       	and	r23, r23
 24a:	e1 f7       	brne	.-8      	; 0x244 <strrev+0x4>
 24c:	32 97       	sbiw	r30, 0x02	; 2
 24e:	04 c0       	rjmp	.+8      	; 0x258 <strrev+0x18>
 250:	7c 91       	ld	r23, X
 252:	6d 93       	st	X+, r22
 254:	70 83       	st	Z, r23
 256:	62 91       	ld	r22, -Z
 258:	ae 17       	cp	r26, r30
 25a:	bf 07       	cpc	r27, r31
 25c:	c8 f3       	brcs	.-14     	; 0x250 <strrev+0x10>
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
